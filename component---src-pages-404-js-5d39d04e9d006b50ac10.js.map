{"version":3,"sources":["webpack:///./src/components/Arrow/Arrow.js","webpack:///./src/pages/404.js","webpack:///./src/utils/getPartTranslationPath.js"],"names":["Arrow","_ref","render","className","wrapperClassName","link","content","stack","bold","thickBorder","upperCase","props","_objectWithoutPropertiesLoose","_excluded","arrowContent","React","createElement","map","arrow","i","arrowStyle","backgroundColor","color","colors","Object","assign","key","style","Link","to","text","toUpperCase","display","flexDirection","path","Element","flex","defaultProps","NotFoundPage","_useTranslation","useTranslation","i18n","title","t","siteLanguage","language","Layout","SEO","lang","getTranslationPath","getPartTranslationPath","part","translationProgress"],"mappings":"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","file":"component---src-pages-404-js-5d39d04e9d006b50ac10.js","sourcesContent":["import './Arrow.scss';\n\nimport Element from '../Element/Element';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport colors from '../../colors';\n\nconst Arrow = ({\n  className,\n  wrapperClassName,\n  link,\n  content,\n  stack,\n  bold,\n  thickBorder,\n  upperCase,\n  ...props\n}) => {\n  const arrowContent = (\n    <div className={`arrow__container arrows--horizontal ${className}`}>\n      {content.map((arrow, i) => {\n        const arrowStyle = {\n          backgroundColor: arrow.backgroundColor\n            ? arrow.backgroundColor\n            : 'transparent',\n          color:\n            arrow.backgroundColor === colors['black']\n              ? 'white'\n              : colors['black'],\n        };\n\n        return (\n          <div key={`arrow${i}`} className=\"arrow__wrapper\" {...props}>\n            <div\n              className={`arrow__rectangle ${bold ? 'bold' : ''} ${\n                thickBorder ? 'arrow__rectangle--thick-border' : ''\n              }`}\n              style={arrowStyle}\n            >\n              {arrow.link ? (\n                <Link to={arrow.link}>\n                  {upperCase ? arrow.text.toUpperCase() : arrow.text}\n                </Link>\n              ) : upperCase ? (\n                arrow.text.toUpperCase()\n              ) : (\n                arrow.text\n              )}\n            </div>\n            <div\n              className={`arrow__point ${\n                thickBorder ? 'arrow__point--thick-border' : ''\n              }`}\n              style={arrowStyle}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  let render;\n\n  if (!stack && !link) {\n    render = <div className=\"col-10 spacing--after\">{arrowContent}</div>;\n  } else if (!stack && link) {\n    render = (\n      <div className=\"spacing--after-small auto-bottom-margin\">\n        <Link to={link} style={{ display: 'inline-block' }}>\n          {arrowContent}\n        </Link>\n      </div>\n    );\n  } else if (stack) {\n    render = (\n      <div className={`col-10 spacing--after ${wrapperClassName}`}>\n        <div\n          className=\"arrow__container arrow__container--with-link\"\n          style={{ display: 'flex', flexDirection: 'column' }}\n        >\n          {content.map(arrow => {\n            const arrowStyle = {\n              backgroundColor: arrow.backgroundColor\n                ? arrow.backgroundColor\n                : 'transparent',\n              color:\n                arrow.backgroundColor === colors['black']\n                  ? 'white'\n                  : colors['black'],\n            };\n\n            return (\n              <Link\n                key={arrow.text}\n                to={arrow.path}\n                className={`arrow__wrapper--stacked ${className}`}\n                {...props}\n              >\n                <Element flex className=\"arrow__rectangle\" style={arrowStyle}>\n                  <p className=\"arrow--stacked-title\">\n                    <span>{arrow.text}</span>\n                  </p>\n                </Element>\n                <div className=\"arrow__point\" style={arrowStyle} />\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  return render;\n};\n\nArrow.propTypes = {\n  className: PropTypes.string,\n  wrapperClassName: PropTypes.string,\n  link: PropTypes.string,\n  content: PropTypes.array.isRequired,\n  stack: PropTypes.bool,\n  upperCase: PropTypes.bool,\n  bold: PropTypes.bool,\n  thickBorder: PropTypes.bool,\n};\n\nArrow.defaultProps = {\n  className: '',\n  wrapperClassName: '',\n};\n\nexport default Arrow;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Arrow from '../components/Arrow/Arrow';\nimport Element from '../components/Element/Element';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport colors from '../colors';\nimport getTranslationPath from '../utils/getPartTranslationPath';\n\nconst NotFoundPage = () => {\n  const { i18n, t } = useTranslation();\n\n  const title = t('notFoundPage:title');\n  const siteLanguage = i18n.language;\n\n  return (\n    <Layout>\n      <SEO title={`${title} | Full stack open`} lang={siteLanguage} />\n\n      <Element className=\"container spacing--large spacing--after\">\n        <h1>404 - {title}</h1>\n\n        <p className=\"col-10 spacing--small spacing--after\">\n          Uncaught ReferenceError: unknown is not defined\n        </p>\n\n        <Arrow\n          className=\"col-10 arrow__container--with-link\"\n          bold\n          thickBorder\n          link={getTranslationPath(siteLanguage, '/')}\n          content={[{ backgroundColor: colors['main'], text: 'Go back home' }]}\n        />\n      </Element>\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n","import translationProgress from './translationProgress';\n\nconst getPartTranslationPath = (language, part, path = '') => {\n  // while the translation are not complete, return the URL for english version\n  if (translationProgress[language] < part) {\n    return `/en/part${part}${path}`;\n  }\n  return language === 'fi'\n    ? `/osa${part}${path}`\n    : `/${language}/part${part}${path}`;\n};\n\nexport default getPartTranslationPath;\n"],"sourceRoot":""}